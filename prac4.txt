import numpy as np
import matplotlib.pyplot as plt
np.random.seed(0)
X = np.random.randn(100, 2)
y = np.array([1 if x[0] + x[1] > 0 else -1 for x in X])
class Perceptron:
    def __init__(self, learning_rate=0.1, epochs=100):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = np.zeros(X.shape[1])
        self.bias = 0
    
    def fit(self, X, y):
        for _ in range(self.epochs):
            for i in range(len(X)):
                activation = np.dot(X[i], self.weights) + self.bias
                if y[i] * activation <= 0:
                    self.weights += self.learning_rate * y[i] * X[i]
                    self.bias += self.learning_rate * y[i]
    
    def predict(self, X):
        return np.where(np.dot(X, self.weights) + self.bias >= 0, 1, -1)
clf = Perceptron(learning_rate=0.1, epochs=100)
clf.fit(X, y)
fig, ax = plt.subplots()
ax.scatter(X[:, 0], X[:, 1], c=y)
xlim = ax.get_xlim()
ylim = ax.get_ylim()
xx, yy = np.meshgrid(np.linspace(xlim[0], xlim[1], 100), np.linspace(ylim[0], ylim[1], 100))
Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)
ax.contourf(xx, yy, Z, alpha=0.2)
plt.show()
