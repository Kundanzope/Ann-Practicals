import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))
def sigmoid_deriv(x):
    return x * (1 - x)
X = np.array([[0,0],[0, 1],[1, 0],[1, 1]])
y = np.array([[0],[1],[1],[0]])
np.random.seed(0)
weights_input_hidden = np.random.rand(2, 2)
weights_hidden_output = np.random.rand(2, 1)
for epoch in range(10000):
    hidden_input = np.dot(X, weights_input_hidden)
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, weights_hidden_output)
    final_output = sigmoid(final_input)

    error = y - final_output
    d_output = error * sigmoid_deriv(final_output)
    d_hidden = d_output.dot(weights_hidden_output.T) * sigmoid_deriv(hidden_output)

    weights_hidden_output += hidden_output.T.dot(d_output)
    weights_input_hidden += X.T.dot(d_hidden)
print("Predictions after training:")
for x in X:
    hidden = sigmoid(np.dot(x, weights_input_hidden))
    output = sigmoid(np.dot(hidden, weights_hidden_output))
    print(f"{x} => {output[0]:.4f}")

output:
Predictions after training:
[0 0] => 0.0325
[0 1] => 0.9313
[1 0] => 0.9313
[1 1] => 0.0916
